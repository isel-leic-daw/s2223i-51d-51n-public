version: "3.3"
services:
  # The service running the DB
  db-tests:
    container_name: db-tests
    hostname: db-tests
    build:
      context: .
      dockerfile: ./tests/Dockerfile-db-test
    environment:
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=changeit
      - POSTGRES_DB=db
    ports:
      - 5432:5432

  # spring-service-1 and spring-service-2 are used to illustrate scenarios with a fixed number of servers
  # with static and well know names.
  spring-service-1:
    container_name: spring-service-1
    hostname: spring-service-1
    build:
      context: .
      dockerfile: ./tests/Dockerfile-spring
    environment:
      PORT: 8081
      POSTGRES_URI: "jdbc:postgresql://db-tests:5432/db?user=dbuser&password=changeit"
    ports:
      - 8081:8081

  spring-service-2:
    container_name: spring-service-2
    hostname: spring-service-2
    build:
      context: .
      dockerfile: ./tests/Dockerfile-spring
    environment:
      PORT: 8082
      POSTGRES_URI: "jdbc:postgresql://db-tests:5432/db?user=dbuser&password=changeit"
    ports:
      - 8082:8082

  # spring-service is used to illustrate scenario with a dynamic number of servers
  # without static and well know names.
  # We will use docker compose scaling to create multiple instances of this service
  spring-service:
    build:
      context: .
      dockerfile: ./tests/Dockerfile-spring
    environment:
      PORT: 8080
      POSTGRES_URI: "jdbc:postgresql://db-tests:5432/db?user=dbuser&password=changeit"

  # The service running the load-balancer
  nginx:
    container_name: nginx
    image: nginx
    ports:
      - 8080:8080
      - 8088:8088
    volumes:
      - ./tests/nginx:/etc/nginx
    depends_on:
      - spring-service-1
      - spring-service-2

  # Just a machine running ubuntu, with 'dig' installed so that we can observe the docker compose environment.
  ubuntu:
    container_name: ubuntu
    build:
      context: .
      dockerfile: ./tests/Dockerfile-ubuntu
    tty: true
